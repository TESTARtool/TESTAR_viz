
/** \page How_dash How do Dash applications work?
Dash is a framework based on REACT.JS with a Python API. (R is also being developed)\n
Dash hides javascript  and (flask) server programming requirements from the developer.\n
A collection of Standard components like Button, Input, Table and CytoScape graph can be used by just pure python code.\n
\n
The Dash framework relies heavily on annotations to control the application-logic and browser actions and responses.\n
Business logic and page layout are written in Python code.
The annotations form the 'glue' between the python functions and ensures proper invocation.\n
(Converse: The inner working of the application cannot be fully understood by just reviewing  the python code.)\n
The call graph shown on \ref cg_dash is generated by Dash and can be seen in the browser when starting a Dash application with 'debug=True'\n
\n
For move information on Dash, please visit https://dash.plot.ly/


When a parameter in the documentation  starts with\n
* i_        :this is an input value, supplied by a Dash callback. When Dash detects a change in this value, the Python function is triggered\n
* s_        :this is an state value, supplied by a Dash callback alongside a trigger value to the python function\n
* return    :this is a return values from an annotated functions that is  supplied to the Dash framework.\n


*/
/** \page cg_dash Call Graph generated by DASH.
The call graph can be displayed in the application web page by setting the variable \ref settingdebug "debug" in settings.py to **True**.\n
The debug icon at the bottom-right corner has now an option to show the call graph.\n
Legend:\n
- Gray box:  Object on the Web page\n
- Blue box:  Attribute of an Object\n
- Green circle:  Processing function (Application logic)\n
- Arrow from Blue box to Green circle: Trigger to fire off the processing. Multiple triggers are or-ed\n
- Arrow from Green circle to Blue box: Output of the processing\n
\n
Notes:\n
- besides the trigger, the processing function is also using State information from the web page and Global data structures on the server-side.\n
The latter makes that the application is not multi-user because each browser  tab will read-and-write to the same global data structures.\n
Launching the application on another port will create a new independent process and mitigate the above effect.\n

- The three screen-prints can be best read from right-to-left
- - -
\image html "20200312 dash call graph 3-3.png" "top of the call graph"
\image latex "20200312 dash call graph 3-3.png" "top of the call graph"
- - -
\image html "20200312 dash call graph 2-3.png" "lower part 1/2 of the call graph"
\image latex "20200312 dash call graph 2-3.png" "lower part 1/2 of the call graph"
- - -
\image html "20200312 dash call graph 1-3.png" "lower part 2/2 of the call graph"
\image latex "20200312 dash call graph 1-3.png" "lower part 2/2 of the call graph"
- - -

*/
- - -
/** \page scr Screen prints of the application
The Application is presented as a single web page.
To show the entire web page, the screen prints slightly overlapping.
- - -
  \image html "20200314 screenprint_upper.png" "screenprint upper part"
   \image latex "20200314 screenprint_upper.png" "screenprint upper part"
  - - -
   \image html "20200314 screenprint_middle.png" "screenprint middle part"
   \image latex "20200314 screenprint_middle.png" "screenprint middle part"
   - - -
 \image html "20200314 screenprint_lower.png" "screenprint lower part"
  \image latex "20200314 screenprint_lower.png" "screenprint lower part"

- - -

*/

/** \page disclaim !! Disclaimer on content.
This auto generated HTML documentation cannot be guaranteed to be precise.\n
For example the call- and caller-graphs that are generated might not be complete, due to inspection depth limitations.\n
Some call- and caller-graphs might appear to be missing. This can be due to the fact that generic import statements, ( * ), cannot be followed through.\n
*/

/** \dir assets
The assets folder hosts:\n
- in the content subfolder:
  - the uploaded content GraphML.XMl file
  - the extracted screen prints as .png files
  - csv files created for the widget distribution experiment
- the favicon icon
- javascript and css files  for the large-upload/dropzone frame.
- javascript to expand or collapse sections

*/
/** \file assets\toggle.js
javascript to expand or collapse sections
*/
/** \file assets\large-upload_modified.html
frame for displaying the dropzone\n
the .css references were modified
*/
/** \file assets\basic_modified.css
modified styling of the dropzone\n
*/
/** \file assets\dropzone_modified.css
modified styling of the dropzone\n
*/
/** \file assets\dropzone.js
original file from https://www.dropzonejs.com \n
No functional modification were applied to this file
*/
/** \dir doxygen
folder that hosts the:\n
- Doxygen configuration file
- Documentation text that cannot be autogenerated from crawling the source code.
- Additional images files
*/